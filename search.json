[{"path":"https://kadyb.github.io/rgugik/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available https://www.contributor-covenant.org/version/1/0/0/code--conduct.html","code":""},{"path":"https://kadyb.github.io/rgugik/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"CONTRIBUTING","title":"CONTRIBUTING","text":"matter current skills, ’s possible contribute rgugik package. appreciate contribution matter amount.","code":""},{"path":"https://kadyb.github.io/rgugik/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs","title":"CONTRIBUTING","text":"’ve found bug, please create minimal reproducible example using reprex package first. Spend time trying make minimal possible, facilitate task speed entire process. Next, submit issue Issues page.","code":""},{"path":[]},{"path":"https://kadyb.github.io/rgugik/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"Contributions","what":"Fixing typos","title":"CONTRIBUTING","text":"can fix typos, spelling mistakes, grammatical errors documentation. use roxygen2, documentation generated using .R files, editing .Rd files directly.","code":""},{"path":"https://kadyb.github.io/rgugik/CONTRIBUTING.html","id":"greater-changes","dir":"","previous_headings":"Contributions","what":"Greater changes","title":"CONTRIBUTING","text":"want make greater change, ’s good idea file issue first make sure someone team agrees ’s needed. don’t want spend bunch time something don’t think suitable idea. accepted, can follow pull request process: Fork repo GitHub account. Clone version machine, e.g., git clone https://github.com/kadyb/rgugik.git. Make sure track progress upstream (.e., version rgugik kadyb/rgugik) git remote add upstream https://github.com/kadyb/rgugik.git. making changes, make sure pull changes upstream either git fetch upstream merge later, git pull upstream fetch merge one step. Make changes (make changes new branch). alter package functionality (e.g., code , just documentation) please write tests cover new functionality. Push changes account. Submit pull request master branch kadyb/rgugik. use testthat unit tests. Contributions test cases included prioritized accept. Please make sure new code documentation match existing style. use lintr static code analysis (.e., code style).","code":""},{"path":"https://kadyb.github.io/rgugik/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"CONTRIBUTING","text":"Questions welcomed Issues page. Adding reproducible example may make easier us answer.","code":""},{"path":[]},{"path":"https://kadyb.github.io/rgugik/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Krzysztof Dyba, Jakub Nowosad Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"definition","dir":"Articles","previous_headings":"","what":"Definition","title":"Digital elevation model","text":"Digital elevation models models describing terrain surface. created result processing aerial photos, laser scanning (LiDAR), geodetic surveying, radar interferometry (InSAR). DEMs one key datasets Geographic Information Systems (GIS) constitute basis many environmental spatial analyses. addition, source derived products terrain slope aspect. DEM general name group models different characteristics, including: Digital terrain model (DTM) - numerical representation terrain morphological forms. model devoid objects ground, buildings trees. Digital surface model (DSM) - numerical representation terrain, including objects surface, buildings trees. Wikimedia Commons, free media repository, https://commons.wikimedia.org/w/index.php?title=File:DTM_DSM.svg&oldid=475779479 (accessed October 7, 2020).  properties DEMs: Format - can distinguish three main structures: GRID (point / cell), TIN (irregular topological triangle network) contour lines (vector). Currently, used format GRID. Accuracy - related vertical measurement error. Spatial resolution - related size smallest object can detected sensor determined size image cell (pixel). larger cell, generalized form terrain presents.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Digital elevation model","text":"purpose vignette determine elevation ground surface objects selected area. source data Airborne Laser Scanning already processed GRID format.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Digital elevation model","text":"analysis area Morasko Meteorite nature reserve located Greater Poland voivodeship. established 1976 order protect area impact craters, , according researchers, formed fall Morasko meteorite 5,000 years ago. addition, oak-hornbeam forest rare species plants (lilium martagon, ceratophyllum submersum) birds (european nightjar, black woodpecker) protected.","code":"# attach packages library(sf) library(stars) library(rgugik)"},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"vector-data","dir":"Articles","previous_headings":"Analysis","what":"Vector data","title":"Digital elevation model","text":"centroid (geometric center) Morasko Meteorite nature reserve X = 16.895 Y = 52.487 coordinates World Geodetic System 1984 (EPSG 4326). Let’s start creating point sf package. Now point embedded space (spatial reference). next step, let’s create approximate zone include area reserve. function st_buffer() used . operation, need transform coordinate system system metric units, e.g. Poland CS92 (EPSG 2180), using st_transform() function. created buffer radius 400 meters. Let’s visualize .  course, area shown exactly reserve area. exact area can determined polygon layer orthophotomap example using General Geographic Database.","code":"morasko = st_point(c(16.895, 52.489)) morasko = st_sfc(morasko, crs = 4326) # set coordinate system morasko ## Geometry set for 1 feature  ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 16.895 ymin: 52.489 xmax: 16.895 ymax: 52.489 ## Geodetic CRS:  WGS 84 ## POINT (16.895 52.489) morasko = st_transform(morasko, crs = 2180) morasko_buffer = st_buffer(morasko, dist = 400) plot(morasko_buffer, axes = TRUE, main = \"Morasko reserve buffer\") plot(morasko, add = TRUE)"},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"raster-data","dir":"Articles","previous_headings":"Analysis","what":"Raster data","title":"Digital elevation model","text":"Now can search available elevation data area using DEM_request() function (analogous ortho_request() function). argument function reserve buffer. Let’s check obtained results. received metadata many types data different formats, timeliness, resolution, accuracy. analysis, need digital terrain model (DTM) digital surface model (DSM) “ARC/INFO ASCII GRID” format. Let’s make data selection creating two tables combining together. Now can download data using tile_download() function filtered data frame input. run problem download, remember can pass another download method download.file() function argument.","code":"req_df = DEM_request(morasko_buffer) # display the first 10 rows and the first 5 columns req_df[1:10, 1:5] ##             sheetID year              format resolution avgElevErr ## 1    N-33-130-D-b-1 2007      Intergraph TTN       <NA>        1.5 ## 2  N-33-130-D-b-1-1 2020 ARC/INFO ASCII GRID      5.0 m        0.5 ## 3  N-33-130-D-b-1-1 2017      ASCII XYZ GRID      1.0 m        0.9 ## 4  N-33-130-D-b-1-1 2012 ARC/INFO ASCII GRID      0.5 m        0.1 ## 5     6.179.11.13.4 2018           ASCII TBD      1.0 m        0.1 ## 6     6.179.11.14.1 2018           ASCII TBD      1.0 m        0.1 ## 7     6.179.11.08.4 2018           ASCII TBD      1.0 m        0.1 ## 8     6.179.11.14.3 2018           ASCII TBD      1.0 m        0.1 ## 9     6.179.11.09.3 2018           ASCII TBD      1.0 m        0.1 ## 10    6.179.11.13.2 2018           ASCII TBD      1.0 m        0.1 req_df_DTM = req_df[req_df$format == \"ARC/INFO ASCII GRID\" &                     req_df$product == \"DTM\" &                     req_df$year == 2019, ] req_df_DSM = req_df[req_df$format == \"ARC/INFO ASCII GRID\" &                     req_df$product == \"DSM\" &                     req_df$year == 2019, ]  # combine data tables req_df = rbind(req_df_DTM, req_df_DSM) req_df[, 1:5] ##             sheetID year              format resolution avgElevErr ## 39 N-33-130-D-b-1-1 2019 ARC/INFO ASCII GRID      1.0 m        0.1 ## 11 N-33-130-D-b-1-1 2019 ARC/INFO ASCII GRID      0.5 m        0.1 # 168.7 MB tile_download(req_df, outdir = \"./data\") ## 1/2 ## 2/2 tile_download(req_df, outdir = \"./data\", method = \"wget\")"},{"path":"https://kadyb.github.io/rgugik/articles/DEM.html","id":"processing","dir":"Articles","previous_headings":"Analysis","what":"Processing","title":"Digital elevation model","text":"Let’s load downloaded numerical models using read_stars() function stars package, allows working spatiotemporal arrays. two files, one represents DTM second represents DSM. probably noticed four-fold difference sizes. due difference cells resolutions. need unify common resolution able combine one stack. much better use lower resolution increase , get information processing faster. Let’s use st_warp() function . Now, models dimensions (number rows columns) spatial resolution. Thus, can combine one object (DEM). Now DEM object consists two attributes (DTM DSM). fact, attributes contains type data representing elevation. Therefore, can collapse attributes new dimension. Let’s using st_redimension(). operation, elevation attribute consists DTM DSM layers (dimensions). let’s crop rasters buffer. Let’s check result looks like.  first quadrant circle, can see five smaller circles. craters formed impact Morasko meteorite. largest fragment found weighs 272 kg largest meteorite found Poland. collection found meteorites can seen Earth Museum Poznań. Let’s calculate crater width using terrain transverse profile. can use centroid add second example point 30 degrees towards N. Next, connect points line (st_linestring()) sample line every 1 m (st_line_sample()), DEM resolution. result, get one complex geometry (MULTIPOINT), convert simple geometry (POINT) consisting many points. function st_cast() used .  last step, extract elevation values points using st_extract(). Now can see transverse profile looks like.  largest width impact crater 90 m. Okay, checked terrain. last step, let’s examine height objects . purpose, calculate height trees subtracting DTM DSM. product difference called normalized DSM, takes terrain elevation reference.","code":"# load data DTM = read_stars(\"data/73044_917579_N-33-130-D-b-1-1.asc\", proxy = FALSE) DSM = read_stars(\"data/73043_917495_N-33-130-D-b-1-1.asc\", proxy = FALSE)  # name raster names(DTM) = \"DTM\" names(DSM) = \"DSM\"  # set coordinate system st_crs(DTM) = 2180 st_crs(DSM) = 2180 DSM = st_warp(DSM, dest = DTM, cellsize = 1) DEM = c(DTM, DSM) length(DEM) ## [1] 2 DEM = st_redimension(DEM) names(st_dimensions(DEM))[3] = \"elev\" # name new data dim st_dimensions(DEM) ##      from   to offset delta               refsys point   values x/y ## x       1 2188 355733     1 ETRS89 / Poland CS92  TRUE     NULL [x] ## y       1 2379 517029    -1 ETRS89 / Poland CS92  TRUE     NULL [y] ## elev    1    2     NA    NA                   NA    NA DTM, DSM DEM = st_crop(DEM, morasko_buffer) plot(DEM, col = terrain.colors(99, alpha = NULL)) pts_matrix = matrix(c(357121.7, 515765.5,                       357321.2, 516017.9),                     ncol = 2, byrow = TRUE) line = st_sfc(st_linestring(pts_matrix), crs = 2180) line = st_line_sample(line, density = 1) line = st_cast(line, \"POINT\") # plot DTM (first layer) plot(DEM[, , , 1], main = \"DTM [m]\", col = terrain.colors(99, alpha = NULL),      reset = FALSE) plot(line, col = \"red\", add = TRUE) # take elevation from DTM and DSM layers elev_line = st_extract(DEM, line)[[1]] colnames(elev_line) = c(\"DTM\", \"DSM\") # use 'dev.off()' to reset previous plot plot(elev_line[, \"DTM\"], type = \"l\", main = \"Digital terrain model\",      ylab = \"Elevation [m]\", xlab = \"Distance [m]\", col = \"red\") abline(v = c(126, 219), col = \"blue\") calc = function(DEM) (DEM[2] - DEM[1]) nDSM = st_apply(DEM, MARGIN = c(\"x\", \"y\"), FUN = calc) plot(nDSM, main = \"Trees height [m]\",      col = hcl.colors(9, palette = \"Greens\", rev = TRUE))"},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"definition","dir":"Articles","previous_headings":"","what":"Definition","title":"Orthophotomap","text":"Orthophotomap raster, orthogonal cartometric representation terrain surface created digital processing aerial satellite images. orthorectification, geometric distortions resulting land relief removed using digital elevation models (DEM). orthophotomap georeferenced, therefore, allows determine geographic coordinates cells. Orthophotomaps’ properties: Spatial resolution - related size smallest object can detected sensor determined size image cell (pixel). smaller cell, detail represents. large pixel means individual objects scene longer recognizable. Composition - analog images shades gray, digital images can natural colors (RGB) near infrared (NIR).","code":""},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Orthophotomap","text":"purpose vignette assess vegetation condition selected area. can done based remote sensing data (multispectral orthophotomap) simple vegetation index. NDVI (Normalized Difference Vegetation Index) simple indicator vegetation uses red near infrared bands. main application monitoring forecasting agricultural production. calculated using following formula: NDVI=NIR−REDNIR+REDNDVI = \\frac {NIR - RED} {NIR + RED} value ranges -1 1. higher value, higher biomass level. Values close 0 related water, bare soil surfaces buildings.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Orthophotomap","text":"analysis area Krajkowo nature reserve located Greater Poland voivodeship. established 1958 order protect breeding places birds, especially grey heron great black cormorant, protect landscape Warta oxbow.","code":"# attach packages library(sf) library(stars) library(rgugik)"},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"vector-data","dir":"Articles","previous_headings":"Analysis","what":"Vector data","title":"Orthophotomap","text":"Data nature reserves can found General Geographic Databases. can obtain using geodb_download() function. Let’s . run problem download, remember can pass another download method download.file() function argument. downloaded database consists many files GML (Geography Markup Language) format. brief description structure database can found . table nature reserves “PL.PZGIK.201.30__OT_TCRZ_A.xml” file. can use sf package read_sf() function load . Let’s check structure data. simple terms, spatial table consisting 110 observations (rows) 28 variables (columns). names objects located nazwa column, allow us select Krajkowo reserve . can display two basic ways: Using plot() function directly specifying column object geometry: plot(krajkowo$geometry) Using plot() st_geometry() functions obtain geometry vector layer. first case, need know name column geometries (e.g. geometry, geom, etc.), second case, geometry selected automatically (safer preferable way).  can also calculate area polygon. st_area() function returned area m^2, conversion got result 165 ha.","code":"# 17.6 MB geodb_download(\"wielkopolskie\", outdir = \"./data\") geodb_download(req_df, outdir = \"./data\", method = \"wget\") reserves = read_sf(\"data/PL.PZGiK.201.30/BDOO/PL.PZGIK.201.30__OT_TCRZ_A.xml\") ncol(reserves) ## [1] 28 nrow(reserves) ## [1] 110 # selection by attribute krajkowo = reserves[reserves$nazwa == \"Krajkowo\", ] plot(st_geometry(krajkowo), axes = TRUE, main = \"Krajkowo reserve\") krajkowo_area = st_area(krajkowo) # [m^2] units::set_units(krajkowo_area, \"ha\") # convert to [ha] ## 165.2744 [ha]"},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"raster-data","dir":"Articles","previous_headings":"Analysis","what":"Raster data","title":"Orthophotomap","text":"Now let’s move stage downloading orthophotomap. use ortho_request() function show us images available analyzed area. need provide Krajkowo polygon argument function. can display resulting table using code . complete task, need obtain near infrared data. next step, select rows composition column value “CIR”. let’s sort table according year photo taken, recent images top table. Let’s display table select newest compositions. Note result pair objects (images). means Krajkowo reserve depicted two photos within one series. Therefore, seriesID column used combine smaller images larger mosaic. tile_download() function used download orthophotomaps taking selected table main argument. can also specify output folder outdir argument.","code":"req_df = ortho_request(krajkowo) # display the first 10 rows and the first 6 columns req_df[1:10, 1:6] ##             sheetID year resolution composition  sensor     CRS ## 1  N-33-142-B-d-4-2 2004       0.50         B/W  Analog PL-1992 ## 2  N-33-142-B-d-4-4 2004       0.50         B/W  Analog PL-1992 ## 3  N-33-142-B-d-4-4 2010       0.25         RGB Digital PL-1992 ## 4  N-33-142-B-d-4-2 2010       0.25         RGB Digital PL-1992 ## 5  N-33-142-B-d-4-4 2010       0.25         CIR Digital PL-1992 ## 6  N-33-142-B-d-4-2 2010       0.25         CIR Digital PL-1992 ## 7  N-33-142-B-d-4-2 2016       0.25         CIR Digital PL-1992 ## 8  N-33-142-B-d-4-2 2016       0.25         RGB Digital PL-1992 ## 9  N-33-142-B-d-4-4 2016       0.25         CIR Digital PL-1992 ## 10 N-33-142-B-d-4-4 2016       0.25         RGB Digital PL-1992 # select IR images and overwrite the req_df object req_df = req_df[req_df$composition == \"CIR\", ] req_df = req_df[order(-req_df$year), ] req_df[, c(1:5, 9)] ##             sheetID year resolution composition  sensor seriesID ## 7  N-33-142-B-d-4-2 2016       0.25         CIR Digital    69837 ## 9  N-33-142-B-d-4-4 2016       0.25         CIR Digital    69837 ## 22 N-33-142-B-d-4-2 2013       0.25         CIR Digital    69903 ## 24 N-33-142-B-d-4-4 2013       0.25         CIR Digital    69903 ## 5  N-33-142-B-d-4-4 2010       0.25         CIR Digital    69763 ## 6  N-33-142-B-d-4-2 2010       0.25         CIR Digital    69763 req_df = req_df[req_df$year == 2016, ] req_df[, c(1:5, 9)] ##            sheetID year resolution composition  sensor seriesID ## 7 N-33-142-B-d-4-2 2016       0.25         CIR Digital    69837 ## 9 N-33-142-B-d-4-4 2016       0.25         CIR Digital    69837 # 61.9 MB tile_download(req_df, outdir = \"./data\") ## 1/2 ## 2/2"},{"path":"https://kadyb.github.io/rgugik/articles/orthophotomap.html","id":"processing","dir":"Articles","previous_headings":"Analysis","what":"Processing","title":"Orthophotomap","text":"Let’s load downloaded orthophotomaps using read_stars() function stars package, allows working spatiotemporal arrays. case, raster consisting three bands (NIR, R, G) one point time. don’t need load entire data array memory - can read file’s metadata instead using proxy argument. Now can perform two operations: rasters merging cropping reserve area. use proxy allows get result almost immediately, processing entire image (proxy = FALSE) take several minutes. Images specific Coordinate Reference Systems, let’s make sure correct one merging. EPSG 2180 case. Let’s display effect using plot() function, define input bands rgb argument. creates composition consisting three bands: NIR, R G case. composition shown infrared, natural colors, may misinterpreted rgb argument name.  last step, calculate NDVI using near infrared (1) red (2) bands.  surprising observation relatively low NDVI values forest area. two reasons , .e. photos taken mid-March (start growing season) probably calibrated. reason, better source data analysis may satellite images, calibrated spectrally obtained continuously (cloudiness occurs).","code":"img1 = read_stars(\"data/69837_329609_N-33-142-B-d-4-2.TIF\", proxy = TRUE) img2 = read_stars(\"data/69837_329613_N-33-142-B-d-4-4.TIF\", proxy = TRUE) img = st_mosaic(img1, img2) st_crs(img) = 2180 # overwrite CRS to be sure img = st_crop(img, krajkowo) plot(img, rgb = c(1, 2, 3), main = NULL) calc_ndvi = function(img) (img[1] - img[2]) / (img[1] + img[2]) ndvi = st_apply(img, MARGIN = c(\"x\", \"y\"), FUN = calc_ndvi) plot(ndvi, main = \"NDVI\", col = hcl.colors(10, palette = \"RdYlGn\"))"},{"path":[]},{"path":"https://kadyb.github.io/rgugik/articles/spatialdb_description.html","id":"second-level-of-categories-names-of-vector-layers","dir":"Articles","previous_headings":"","what":"Second level of categories (names of vector layers)","title":"Spatial Databases","text":"last character vector layer name means: P - point L - line - area","code":""},{"path":"https://kadyb.github.io/rgugik/articles/spatialdb_description.html","id":"other-files","dir":"Articles","previous_headings":"","what":"Other files","title":"Spatial Databases","text":"“UzytkownikXX (UserXX)” - contact details Voivodeship Marshal’s Office. “XX” contains TERC (voivodeship ID). Files names: “Ciek (Watercourse)”, “LiniaKolejowa (Railway line)”, “SzlakDrogowy (Road trail)”, “WezelKolejowy (Railway junction)”, “ZbiornikWodny (Reservoir)” contain metadata objects.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"definition","dir":"Articles","previous_headings":"","what":"Definition","title":"Topographic Database","text":"Topographic Database (pl. Baza Danych Obiektów Topograficznych) vector (object) database containing spatial location topographic objects characteristics Poland. content detail database correspond topographic map scale 1:10000. thematic scope includes information water network, communication network, land cover, buildings technical structures, utility infrastructure, land use, protected areas, territorial division units, objects. database available Geography Markup Language (GML) format. source data comes : spatial databases maintained Polish Head Office Geodesy Cartography (e.g. Register Towns, Streets Addresses, Register Land Buildings, State Register Borders), databases maintained ministries institutions (e.g., Ministry Infrastructure, State Water Management, General Directorate Environmental Protection), fieldworks.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Topographic Database","text":"purpose vignette perform spatial operations vector data Topographic Database. focus four cases, taking account different types geometry, .e. point, line, polygon, attributes. Also, show can visualized.","code":""},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Topographic Database","text":"analysis area bieszczadzki county located Subcarpathian (podkarpackie) voivodeship. farthest south area Poland also lowest population density (19 people km2).","code":"# attach packages library(sf) library(rgugik)"},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"database","dir":"Articles","previous_headings":"Analysis","what":"Database","title":"Topographic Database","text":"start downloading topographic database county using topodb_download() function. run problem download, remember can pass another download method download.file() function argument. downloaded database consists many files GML format. data necessary analyzes can found data/PL.PZGiK.332.1801/BDOT10k/ location. brief description structure database can found . First, let’s load file administrative units (“PL.PZGiK.332.1801__OT_ADJA_A.xml”) using sf package read_sf() function. file contains administrative units various levels, let’s choose lowest level, .e. communes. three types communes dataset, specified rodzaj column: urban (GM), rural (GW), urban-rural (Gmw). Let’s select . can see bieszczadzki county consists two rural communes one urban-rural commune. Let’s visualize .","code":"# 22.4 MB topodb_download(\"bieszczadzki\", outdir = \"./data\") topodb_download(req_df, outdir = \"./data\", method = \"wget\") territory = read_sf(\"data/PL.PZGiK.332.1801/BDOT10k/PL.PZGiK.332.1801__OT_ADJA_A.xml\") communes = territory[territory$rodzaj %in% c(\"GM\", \"GW\", \"Gmw\"), \"rodzaj\"] table(communes$rodzaj) ##  ## Gmw  GW  ##   1   2 plot(communes, axes = TRUE, main = \"Bieszczadzki county\")"},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"lengths-and-categories-of-roads","dir":"Articles","previous_headings":"Analysis","what":"Lengths and categories of roads","title":"Topographic Database","text":"first task, calculate lengths roads, taking account categories. Road data can found “PL.PZGiK.332.1801__OT_SKDR_L.xml” file. Let’s plot . use plot() function , time combine two layers one image. first layer (background) contains roads add another layer, set argument reset \"FALSE\". can add second layer territory borders setting add argument \"TRUE\".  six road categories related managing entity. : national (K), voivodeship (W), county (P), communal (G), institutional (Z), () roads. use st_length() function find length object table. Next, create data frame consisting road category length. aggregate data frame calculate sum lengths category. results given meters - let’s convert kilometers. Let’s also change names categories. Now can see results. type roads dominates consists mainly non-public roads. can also calculate total length roads area. result 3328.285 km. Another aspect data can investigate density road network. need calculate total area first, divide total road length total area. road density 2.92 km/km2.","code":"roads = read_sf(\"data/PL.PZGiK.332.1801/BDOT10k/PL.PZGiK.332.1801__OT_SKDR_L.xml\") plot(roads[\"katZarzadzania\"], main = \"Road category\", reset = FALSE) plot(st_geometry(territory), add = TRUE) length_roads = st_length(roads) length_roads = data.frame(length = length_roads,                           class = as.factor(roads$katZarzadzania)) length_roads = aggregate(length ~ class, data = length_roads, FUN = sum) # convert to [km] length_roads$length = units::set_units(length_roads$length, \"km\") road_class = c(\"communal\", \"other\", \"national\", \"county\", \"voivodeship\",                \"institutional\") levels(length_roads$class) = road_class length_roads ##           class          length ## 1      communal  186.17329 [km] ## 2         other 2819.55806 [km] ## 3      national   19.24996 [km] ## 4        county  187.17870 [km] ## 5   voivodeship  105.67567 [km] ## 6 institutional   10.44893 [km] sum(length_roads$length) ## 3328.285 [km] communes_area = sum(st_area(communes)) communes_area = units::set_units(communes_area, \"km2\") density = sum(length_roads$length)/communes_area density = units::set_units(density, \"km/km2\") density ## 2.921031 [km/km2]"},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"roads-through-the-rivers","dir":"Articles","previous_headings":"Analysis","what":"Roads through the rivers","title":"Topographic Database","text":"Another dataset included Topographic Database contains rivers area (“PL.PZGiK.332.1801__OT_SWRS_L.xml”). Rivers divided smaller sections different parameters, river width data source. Let’s merge sections rivers single feature (geometry) - can use attribute ID (idMPHP) purpose. can also give river category number creating sequence 1 n using seq_len function. Let’s visualize rivers’ courses.  rivers roads, can designate points intersection symbolize bridges crossings. can use st_intersection() function . get 81 points. Let’s plot .","code":"rivers = read_sf(\"data/PL.PZGiK.332.1801/BDOT10k/PL.PZGiK.332.1801__OT_SWRS_L.xml\") rivers = rivers[rivers$rodzaj == \"Rz\", ] # select only rivers rivers = aggregate(rivers[, c(\"geometry\", \"idMPHP\")],                    list(rivers$idMPHP),                    sum) rivers$idMPHP = seq_len(length(unique(rivers$idMPHP))) rivers$idMPHP = as.factor(rivers$idMPHP) plot(rivers[\"idMPHP\"], main = \"Rivers\", reset = FALSE) plot(st_geometry(territory), add = TRUE) bridges = st_geometry(st_intersection(rivers, roads)) length(bridges) ## [1] 81 # use 'dev.off()' to reset previous plot plot(st_geometry(rivers), main = \"Bridges and crossings\", col = \"blue\") plot(st_geometry(territory), add = TRUE) plot(bridges, add = TRUE, pch = 20)"},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"land-cover","dir":"Articles","previous_headings":"Analysis","what":"Land cover","title":"Topographic Database","text":"Land cover physical material surface earth like grass, trees, bare ground, water, etc. Let’s check land cover data county - stored files PT prefix. use list.files() function list . pattern argument important determines files selected. pattern look like : PT+.+\\\\.xml$ - files containing areal data () land cover (PT) listed. also can exclude “PL.PZGiK.332.1801__OT_PTSO_A.xml” file list, file contains zero objects (features). Let’s prepare names objects data loaded. following names extended names abbreviations stored filenames. Now load GML file, naming list . Instead using loop, can use lapply() function, performs specific action element vector. action case load GML files using read_sf(). Previously, used st_length() calculate line length, now use corresponding st_area() function calculate area. use lapply() function analogously, work item list. similar function sapply(), returns vector instead list. Let’s see results (kilometers). Let’s make sure total land cover equal area county. tiny precision differences possible, set difference tolerance. possible using .equal() function. Everything correct. Let’s present results percentages area sort descending order. 75% county’s area covered forests less 1% buildings.","code":"files = list.files(\"data/PL.PZGiK.332.1801/BDOT10k\",                    pattern = \"PT+.+A\\\\.xml$\",                    full.names = TRUE)  # print filenames basename(files) ##  [1] \"PL.PZGiK.332.1801__OT_PTGN_A.xml\" ##  [2] \"PL.PZGiK.332.1801__OT_PTKM_A.xml\" ##  [3] \"PL.PZGiK.332.1801__OT_PTLZ_A.xml\" ##  [4] \"PL.PZGiK.332.1801__OT_PTNZ_A.xml\" ##  [5] \"PL.PZGiK.332.1801__OT_PTPL_A.xml\" ##  [6] \"PL.PZGiK.332.1801__OT_PTRK_A.xml\" ##  [7] \"PL.PZGiK.332.1801__OT_PTSO_A.xml\" ##  [8] \"PL.PZGiK.332.1801__OT_PTTR_A.xml\" ##  [9] \"PL.PZGiK.332.1801__OT_PTUT_A.xml\" ## [10] \"PL.PZGiK.332.1801__OT_PTWP_A.xml\" ## [11] \"PL.PZGiK.332.1801__OT_PTWZ_A.xml\" ## [12] \"PL.PZGiK.332.1801__OT_PTZB_A.xml\" # drop \"OT_PTSO_A.xml\" files = files[-7] layer_names = c(\"fallowlands\", \"communication\", \"forest\", \"undeveloped\",                 \"squares\", \"shrublands\", \"crops\", \"grassland\",                 \"water\", \"heaps\", \"buildings\") layers = lapply(files, read_sf) names(layers) = layer_names # calculate areas in each layer area_landcover = lapply(layers, st_area) # sum areas for each layer area_landcover = sapply(area_landcover, sum) # convert units area_landcover = units::set_units(area_landcover, \"m^2\") area_landcover = units::set_units(area_landcover, \"km^2\") names(area_landcover) = layer_names area_landcover ## Units: [km^2] ##   fallowlands communication        forest   undeveloped       squares  ##    0.07561383    1.97014481  860.17248134    0.27817715    0.29038385  ##    shrublands         crops     grassland         water         heaps  ##    1.57266555  255.13528884    0.63447491    8.81181550    0.09220115  ##     buildings  ##   10.38781092 all.equal(sum(area_landcover), communes_area, tolerance = 0.001) ## [1] TRUE landcover_percentage = area_landcover / sum(area_landcover) * 100 units(landcover_percentage) = NULL # drop units landcover_percentage = sort(landcover_percentage, decreasing = TRUE) landcover_percentage = round(landcover_percentage, 2) landcover_percentage ##        forest         crops     buildings         water communication  ##         75.49         22.39          0.91          0.77          0.17  ##    shrublands     grassland       squares   undeveloped         heaps  ##          0.14          0.06          0.03          0.02          0.01  ##   fallowlands  ##          0.01"},{"path":"https://kadyb.github.io/rgugik/articles/topodb.html","id":"buffer","dir":"Articles","previous_headings":"Analysis","what":"Buffer","title":"Topographic Database","text":"last analysis vignette, want check many buildings bus stops within given distance. can apply spatial buffers solve question. Information bus stops “PL.PZGiK.332.1801__OT_OIKM_P.xml” file, represented OIKM04 value x_kod attribute. Let’s prepare visualization bus stops marked blue dots buildings presented red polygons.  Let’s create buffer bus stop range 1 km using st_buffer(). Now, can plot .  return buildings within buffer range, can perform st_within() operation. result nested list consists 2828 buildings associated buffers. Let’s count many buildings buffer using sapply() previous examples. Answer last question: 14% buildings county access bus stop within 1 km radius.","code":"bus_stop = read_sf(\"data/PL.PZGiK.332.1801/BDOT10k/PL.PZGiK.332.1801__OT_OIKM_P.xml\") bus_stop = bus_stop[bus_stop$x_kod == \"OIKM04\", ] buildings = layers$buildings plot(st_geometry(communes), main = \"Bus stops\") plot(st_geometry(layers$buildings), add = TRUE, border = \"red\") plot(st_geometry(bus_stop), add = TRUE, pch = 20, cex = 0.7, col = \"blue\") bus_buffer = st_buffer(bus_stop, 1000) plot(st_geometry(communes), main = \"Bus stops buffers\") plot(st_geometry(buildings), add = TRUE, border = \"red\") plot(st_geometry(bus_buffer), add = TRUE) buildings_buffer = st_within(buildings, bus_buffer) buildings_ex = sapply(buildings_buffer, length) buildings_ex = sum(buildings_ex == 0) buildings_ex = round(buildings_ex / nrow(buildings) * 100) buildings_ex ## [1] 14"},{"path":"https://kadyb.github.io/rgugik/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Krzysztof Dyba. Author, maintainer. Jakub Nowosad. Author. Maciej Beręsewicz. Contributor. GUGiK. Contributor.           source data","code":""},{"path":"https://kadyb.github.io/rgugik/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dyba, K. Nowosad, J. (2021). rgugik: Search Retrieve Spatial Data Polish Head Office Geodesy Cartography R. Journal Open Source Software, 6(59), 2948, https://doi.org/10.21105/joss.02948","code":"@Article{,   title = {rgugik: Search and Retrieve Spatial Data from the Polish Head Office of Geodesy and Cartography in R},   author = {Krzysztof Dyba and Jakub Nowosad},   journal = {Journal of Open Source Software},   year = {2021},   volume = {6},   number = {59},   pages = {2948},   doi = {10.21105/joss.02948},   url = {https://doi.org/10.21105/joss.02948}, }"},{"path":"https://kadyb.github.io/rgugik/index.html","id":"rgugik-","dir":"","previous_headings":"","what":"Search and Retrieve Spatial Data from GUGiK","title":"Search and Retrieve Spatial Data from GUGiK","text":"rgugik R package downloading open data resources Polish Head Office Geodesy Cartography including: Orthophotomaps General Geographic Database Topographic Database Register Towns, Streets Addresses State Register Geographical Names State Register Borders Location (geometry) cadastral parcels using TERYT (parcel ID) coordinates 3D models buildings (LOD1, LOD2) Digital terrain model Digital surface model Point cloud also possible geocode addresses objects using geocodePL_get() function. Corresponding functions additional functions obtaining digital terrain model: pointDTM_get() small areas (high resolution grid) pointDTM100_download() voivodeships areas (low resolution grid) minmaxDTM_get() find minimum maximum elevation (small areas) names administrative units IDs included objects: voivodeship_names (16) county_names (380) commune_names (2476)","code":""},{"path":"https://kadyb.github.io/rgugik/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Search and Retrieve Spatial Data from GUGiK","text":"can install released version CRAN : can install development version GitHub :","code":"install.packages(\"rgugik\") # install.packages(\"remotes\") remotes::install_github(\"kadyb/rgugik\")"},{"path":[]},{"path":"https://kadyb.github.io/rgugik/index.html","id":"orthophotomap","dir":"","previous_headings":"Usage","what":"Orthophotomap","title":"Search and Retrieve Spatial Data from GUGiK","text":"ortho_request() - returns data frame metadata links orthoimages given geometry (point, line polygon) tile_download() - downloads orthoimages based data frame obtained using ortho_request() function","code":"library(rgugik) library(sf) library(stars)  polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path)  req_df = ortho_request(polygon)  # select the oldest image req_df = req_df[req_df$year == 2001, ]  # print metadata t(req_df) #>             27                                                                               #> sheetID     \"N-33-130-D-b-2-3\"                                                               #> year        \"2001\"                                                                           #> resolution  \"1\"                                                                              #> composition \"RGB\"                                                                            #> sensor      \"Satellite\"                                                                      #> CRS         \"PL-1992\"                                                                        #> date        \"2001-01-01\"                                                                     #> isFilled    \"TRUE\"                                                                           #> URL         \"https://opendata.geoportal.gov.pl/ortofotomapa/41/41_3756_N-33-130-D-b-2-3.tif\" #> filename    \"41_3756_N-33-130-D-b-2-3\"                                                       #> seriesID    \"41\"  # download image tile_download(req_df) #> 1/1  img = read_stars(\"41_3756_N-33-130-D-b-2-3.tif\") plot(st_rgb(img), main = NULL)"},{"path":"https://kadyb.github.io/rgugik/index.html","id":"administrative-boundaries","dir":"","previous_headings":"Usage","what":"Administrative boundaries","title":"Search and Retrieve Spatial Data from GUGiK","text":"","code":"library(rgugik) library(sf)  # get counties from opolskie voivodeship (TERYT 16) counties = county_names counties = counties[substr(counties$TERYT, 1, 2) == \"16\", \"TERYT\"] counties_geom = borders_get(TERYT = counties) plot(st_geometry(counties_geom), main = \"Opolskie\")"},{"path":"https://kadyb.github.io/rgugik/index.html","id":"vignettes","dir":"","previous_headings":"Usage","what":"Vignettes","title":"Search and Retrieve Spatial Data from GUGiK","text":"advanced examples practical (step step) use package can found vignettes: Orthophotomap Digital elevation model Topographic Database","code":""},{"path":"https://kadyb.github.io/rgugik/index.html","id":"acknowledgment","dir":"","previous_headings":"","what":"Acknowledgment","title":"Search and Retrieve Spatial Data from GUGiK","text":"Head Office Geodesy Cartography Poland main source provided data. data made available accordance Act May 17, 1989 Geodetic Cartographic Law (amended 16 April 2020). datasets can explored interactively using Geoportal.","code":""},{"path":"https://kadyb.github.io/rgugik/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Search and Retrieve Spatial Data from GUGiK","text":"Contributions package welcome. preferred method contribution GitHub pull request. Feel also free contact us creating issue. detailed information can found CONTRIBUTING document. Maintainers contributors must follow repository’s CODE CONDUCT.","code":""},{"path":"https://kadyb.github.io/rgugik/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Search and Retrieve Spatial Data from GUGiK","text":"cite rgugik publications, please use following article: BibTeX version can obtained citation(\"rgugik\").","code":"Dyba, K. and Nowosad, J. (2021). rgugik: Search and Retrieve Spatial Data from the Polish Head Office of Geodesy and Cartography in R. Journal of Open Source Software, 6(59), 2948, https://doi.org/10.21105/joss.02948"},{"path":"https://kadyb.github.io/rgugik/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Search and Retrieve Spatial Data from GUGiK","text":"don’t feel familiar R, similar QGIS tool EnviroSolutions repository.","code":""},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata and links to available digital elevation models — DEM_request","title":"Get metadata and links to available digital elevation models — DEM_request","text":"Get metadata links available digital elevation models","code":""},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata and links to available digital elevation models — DEM_request","text":"","code":"DEM_request(x)"},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata and links to available digital elevation models — DEM_request","text":"x sf, sfc SpatVector object one features (requests based bounding boxes provided features)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata and links to available digital elevation models — DEM_request","text":"data frame metadata links digital elevation models (different formats digital terrain model, digital surface model point clouds)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata and links to available digital elevation models — DEM_request","text":"server can return maximum 2000 records single query. area interest exceeds limit, can generate grid smaller polygons (sf::st_make_grid()) regular grid points (sf::st_sample()).","code":""},{"path":[]},{"path":"https://kadyb.github.io/rgugik/reference/DEM_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata and links to available digital elevation models — DEM_request","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path) req_df = DEM_request(polygon)  # simple filtering by attributes req_df = req_df[req_df$year > 2018, ] req_df = req_df[req_df$product == \"PointCloud\" & req_df$format == \"LAS\", ] } # }"},{"path":"https://kadyb.github.io/rgugik/reference/borders_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download State Register of Borders — borders_download","title":"Download State Register of Borders — borders_download","text":"Download State Register Borders","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download State Register of Borders — borders_download","text":"","code":"borders_download(type, outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/borders_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download State Register of Borders — borders_download","text":"type \"administrative units\", \"special units\" \"addresses\" outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download State Register of Borders — borders_download","text":"selected data type SHP format","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download State Register of Borders — borders_download","text":"","code":"if (FALSE) { # \\dontrun{ borders_download(\"administrative units\") # 375 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the boundaries of administrative units — borders_get","title":"Get the boundaries of administrative units — borders_get","text":"Get boundaries administrative units","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the boundaries of administrative units — borders_get","text":"","code":"borders_get(voivodeship = NULL, county = NULL, commune = NULL, TERYT = NULL)"},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the boundaries of administrative units — borders_get","text":"voivodeship selected voivodeships Polish. Check voivodeship_names() function county county names Polish. Check county_names() function commune commune names Polish. Check commune_names() function TERYT voivodeships, counties communes (2, 4 7 characters)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the boundaries of administrative units — borders_get","text":"sf data.frame (EPSG: 2180)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the boundaries of administrative units — borders_get","text":"arguments NULL (default), boundary Poland returned.","code":""},{"path":"https://kadyb.github.io/rgugik/reference/borders_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the boundaries of administrative units — borders_get","text":"","code":"if (FALSE) { # \\dontrun{ voivodeship_geom = borders_get(voivodeship = \"lubuskie\") # 494 KB county_geom = borders_get(county = \"Sopot\") # 18 KB commune_geom = borders_get(commune = c(\"Hel\", \"Krynica Morska\")) # 11 KB poland_geom = borders_get() # 1124.3 KB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/commune_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Communes in Poland — commune_names","title":"Communes in Poland — commune_names","text":"data frame contains names communes, identifiers (TERC, 7 characters).","code":""},{"path":"https://kadyb.github.io/rgugik/reference/commune_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Communes in Poland — commune_names","text":"","code":"commune_names"},{"path":"https://kadyb.github.io/rgugik/reference/commune_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Communes in Poland — commune_names","text":"object class data.frame 2477 rows 2 columns.","code":""},{"path":"https://kadyb.github.io/rgugik/reference/commune_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Communes in Poland — commune_names","text":"Last update: 2 January 2024","code":""},{"path":"https://kadyb.github.io/rgugik/reference/commune_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Communes in Poland — commune_names","text":"","code":"commune_names"},{"path":"https://kadyb.github.io/rgugik/reference/county_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Counties in Poland — county_names","title":"Counties in Poland — county_names","text":"data frame contains names counties, identifiers (TERYT, 4 characters) availability building models LOD2 standard (logical value).","code":""},{"path":"https://kadyb.github.io/rgugik/reference/county_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counties in Poland — county_names","text":"","code":"county_names"},{"path":"https://kadyb.github.io/rgugik/reference/county_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Counties in Poland — county_names","text":"object class data.frame 380 rows 3 columns.","code":""},{"path":"https://kadyb.github.io/rgugik/reference/county_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counties in Poland — county_names","text":"","code":"county_names"},{"path":"https://kadyb.github.io/rgugik/reference/emuia_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Register of Towns, Streets and Addresses for communes — emuia_download","title":"Download Register of Towns, Streets and Addresses for communes — emuia_download","text":"Download Register Towns, Streets Addresses communes","code":""},{"path":"https://kadyb.github.io/rgugik/reference/emuia_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Register of Towns, Streets and Addresses for communes — emuia_download","text":"","code":"emuia_download(commune = NULL, TERYT = NULL, outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/emuia_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Register of Towns, Streets and Addresses for communes — emuia_download","text":"commune commune name Polish. Check commune_names() function. TERYT county ID (7 characters) outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/emuia_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Register of Towns, Streets and Addresses for communes — emuia_download","text":"register SHP format","code":""},{"path":"https://kadyb.github.io/rgugik/reference/emuia_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Register of Towns, Streets and Addresses for communes — emuia_download","text":"","code":"if (FALSE) { # \\dontrun{ emuia_download(commune = \"Kotla\") # 38 KB emuia_download(TERYT = c(\"0203042\", \"2412032\")) # 75 KB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/geocodePL_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert addresses and objects to geographic coordinates — geocodePL_get","title":"Convert addresses and objects to geographic coordinates — geocodePL_get","text":"Convert addresses objects geographic coordinates","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geocodePL_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert addresses and objects to geographic coordinates — geocodePL_get","text":"","code":"geocodePL_get(   address = NULL,   road = NULL,   rail_crossing = NULL,   geoname = NULL )"},{"path":"https://kadyb.github.io/rgugik/reference/geocodePL_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert addresses and objects to geographic coordinates — geocodePL_get","text":"address place without street house number road road number without mileage rail_crossing rail crossing identifier (11 characters including 2 spaces, format: \"XXX XXX XXX\") geoname name geographical object State Register Geographical Names (function geonames_download())","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geocodePL_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert addresses and objects to geographic coordinates — geocodePL_get","text":"sf data.frame (EPSG: 2180) metadata","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geocodePL_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert addresses and objects to geographic coordinates — geocodePL_get","text":"","code":"if (FALSE) { # \\dontrun{ geocodePL_get(address = \"Marki\") # place geocodePL_get(address = \"Marki, Andersa\") # place and street geocodePL_get(address = \"Marki, Andersa 1\") # place, street and house number geocodePL_get(address = \"Królewskie Brzeziny 13\") # place and house number  geocodePL_get(road = \"632\") # road number geocodePL_get(road = \"632 55\") # road number and mileage  geocodePL_get(rail_crossing = \"001 018 478\")  geocodePL_get(geoname = \"Las Mierzei\") # physiographic object } # }"},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download General Geographic Databases for entire voivodeships — geodb_download","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"Download General Geographic Databases entire voivodeships","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"","code":"geodb_download(voivodeships, outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"voivodeships selected voivodeships Polish English, TERC (object voivodeship_names can helpful) outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"database Geography Markup Language format (.GML), content detail level corresponds general geographic map scale 1:250000","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"description topographical general geographical databases, technical standards making maps (Polish): https://isap.sejm.gov.pl/isap.nsf/download.xsp/WDU20210001412/O/D20211412.pdf brief description categories layer names (English Polish): https://kadyb.github.io/rgugik/articles/articles/spatialdb_description.html","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geodb_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download General Geographic Databases for entire voivodeships — geodb_download","text":"","code":"if (FALSE) { # \\dontrun{ geodb_download(c(\"opolskie\", \"lubuskie\")) # 12.7 MB geodb_download(c(\"Opole\", \"Lubusz\")) # 12.7 MB geodb_download(c(\"16\", \"08\")) # 12.7 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download State Register of Geographical Names — geonames_download","title":"Download State Register of Geographical Names — geonames_download","text":"Download State Register Geographical Names","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download State Register of Geographical Names — geonames_download","text":"","code":"geonames_download(type, format = \"SHP\", outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download State Register of Geographical Names — geonames_download","text":"type names places (\"place\") /physiographic objects (\"object\") format data format (\"GML\", \"SHP\" (default) /\"XLSX\") outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download State Register of Geographical Names — geonames_download","text":"selected data type specified format","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download State Register of Geographical Names — geonames_download","text":"http://isap.sejm.gov.pl/isap.nsf/download.xsp/WDU20150000219/O/D20150219.pdf","code":""},{"path":"https://kadyb.github.io/rgugik/reference/geonames_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download State Register of Geographical Names — geonames_download","text":"","code":"if (FALSE) { # \\dontrun{ geonames_download(type = \"place\", format = \"SHP\") # 18.2 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/minmaxDTM_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","title":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","text":"Get minimum maximum elevation given polygon","code":""},{"path":"https://kadyb.github.io/rgugik/reference/minmaxDTM_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","text":"","code":"minmaxDTM_get(polygon)"},{"path":"https://kadyb.github.io/rgugik/reference/minmaxDTM_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","text":"polygon polygon layer one object (area less 10 ha), larger polygon area, lower DTM resolution, input coordinate system must EPSG:2180","code":""},{"path":"https://kadyb.github.io/rgugik/reference/minmaxDTM_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","text":"data frame vector points min/max terrain elevation (EPSG:2180)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/minmaxDTM_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get minimum and maximum elevation for a given polygon — minmaxDTM_get","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path) minmax = minmaxDTM_get(polygon) } # }"},{"path":"https://kadyb.github.io/rgugik/reference/models3D_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download 3D models of buildings for counties — models3D_download","title":"Download 3D models of buildings for counties — models3D_download","text":"Download 3D models buildings counties","code":""},{"path":"https://kadyb.github.io/rgugik/reference/models3D_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download 3D models of buildings for counties — models3D_download","text":"","code":"models3D_download(   county = NULL,   TERYT = NULL,   LOD = \"LOD1\",   outdir = \".\",   unzip = TRUE,   ... )"},{"path":"https://kadyb.github.io/rgugik/reference/models3D_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download 3D models of buildings for counties — models3D_download","text":"county county name Polish. Check county_names() function. TERYT county ID (4 characters) LOD level detail building models (\"LOD1\" \"LOD2\"). \"LOD1\" default. \"LOD2\" available ten voivodeships (TERC: \"04\", \"06\", \"12\", \"14\", \"16\", \"18\", \"20\", \"24\", \"26\", \"28\"). Check voivodeship_names() function. outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/models3D_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download 3D models of buildings for counties — models3D_download","text":"models buildings Geography Markup Language format (.GML)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/models3D_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download 3D models of buildings for counties — models3D_download","text":"","code":"if (FALSE) { # \\dontrun{ models3D_download(TERYT = c(\"2476\", \"2264\")) # 3.6 MB models3D_download(county = \"sejneński\", LOD = \"LOD2\") # 7.0 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata and links to available orthoimages — ortho_request","title":"Get metadata and links to available orthoimages — ortho_request","text":"Get metadata links available orthoimages","code":""},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata and links to available orthoimages — ortho_request","text":"","code":"ortho_request(x)  orto_request(x)"},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata and links to available orthoimages — ortho_request","text":"x sf, sfc SpatVector object one features (requests based bounding boxes provided features)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata and links to available orthoimages — ortho_request","text":"data frame metadata links orthoimages","code":""},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata and links to available orthoimages — ortho_request","text":"server can return maximum 2000 records single query. area interest exceeds limit, can generate grid smaller polygons (sf::st_make_grid()) regular grid points (sf::st_sample()).","code":""},{"path":[]},{"path":"https://kadyb.github.io/rgugik/reference/ortho_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata and links to available orthoimages — ortho_request","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path) req_df = ortho_request(polygon)  # simple filtering by attributes req_df = req_df[req_df$composition == \"CIR\", ] req_df = req_df[req_df$resolution <= 0.25 & req_df$year >= 2016, ] } # }"},{"path":"https://kadyb.github.io/rgugik/reference/parcel_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the geometry of cadastral parcels — parcel_get","title":"Get the geometry of cadastral parcels — parcel_get","text":"Get geometry cadastral parcels","code":""},{"path":"https://kadyb.github.io/rgugik/reference/parcel_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the geometry of cadastral parcels — parcel_get","text":"","code":"parcel_get(TERYT = NULL, X = NULL, Y = NULL)"},{"path":"https://kadyb.github.io/rgugik/reference/parcel_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the geometry of cadastral parcels — parcel_get","text":"TERYT parcel ID (18 characters, e.g. \"141201_1.0001.6509\") X longitude (EPSG: 2180) Y latitude (EPSG: 2180)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/parcel_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the geometry of cadastral parcels — parcel_get","text":"simple feature geometry (case TERYT) data frame simple feature geometry TERYT (case coordinates)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/parcel_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the geometry of cadastral parcels — parcel_get","text":"","code":"if (FALSE) { # \\dontrun{ parcel = parcel_get(TERYT = \"141201_1.0001.6509\") parcel = parcel_get(X = 313380.5, Y = 460166.4) } # }"},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM100_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","title":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","text":"Download digital terrain models voivodeships (100 m resolution)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM100_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","text":"","code":"pointDTM100_download(voivodeships, outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM100_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","text":"voivodeships selected voivodeships Polish English, TERC (function voivodeship_names() can helpful) outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM100_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","text":"text files X, Y, Z columns (EPSG:2180)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM100_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download digital terrain models for voivodeships (100 m resolution) — pointDTM100_download","text":"","code":"if (FALSE) { # \\dontrun{ pointDTM100_download(c(\"opolskie\", \"świętokrzyskie\")) # 8.5 MB pointDTM100_download(c(\"Opole\", \"Swietokrzyskie\")) # 8.5 MB pointDTM100_download(c(\"16\", \"26\")) # 8.5 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get terrain elevation for a given polygon — pointDTM_get","title":"Get terrain elevation for a given polygon — pointDTM_get","text":"Get terrain elevation given polygon","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get terrain elevation for a given polygon — pointDTM_get","text":"","code":"pointDTM_get(polygon, distance = 1, print_iter = TRUE)"},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get terrain elevation for a given polygon — pointDTM_get","text":"polygon polygon layer one object (area limited 20 ha * distance parameter), input coordinate system must EPSG:2180 distance distance points meters (must integer greater 1) print_iter print current iteration (logical, TRUE default)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get terrain elevation for a given polygon — pointDTM_get","text":"data frame vector points terrain elevation (EPSG:2180, Vertical Reference System:PL-KRON86-NH)","code":""},{"path":"https://kadyb.github.io/rgugik/reference/pointDTM_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get terrain elevation for a given polygon — pointDTM_get","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path) DTM = pointDTM_get(polygon, distance = 2) } # }"},{"path":"https://kadyb.github.io/rgugik/reference/rgugik-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rgugik: Search and Retrieve Spatial Data from 'GUGiK' — rgugik-package","title":"rgugik: Search and Retrieve Spatial Data from 'GUGiK' — rgugik-package","text":"Automatic open data acquisition resources Polish Head Office Geodesy Cartography ('Główny Urząd Geodezji Kartografii') (https://www.gov.pl/web/gugik). Available datasets include various types numeric, raster vector data, orthophotomaps, digital elevation models (digital terrain models, digital surface model, point clouds), state register borders, spatial databases, geometries cadastral parcels, 3D models buildings, . also possible geocode addresses objects using geocodePL_get() function.","code":""},{"path":[]},{"path":"https://kadyb.github.io/rgugik/reference/rgugik-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgugik: Search and Retrieve Spatial Data from 'GUGiK' — rgugik-package","text":"Maintainer: Krzysztof Dyba adres7@gmail.com (ORCID) Authors: Jakub Nowosad nowosad.jakub@gmail.com (ORCID) contributors: Maciej Beręsewicz maciej.beresewicz@ue.poznan.pl (ORCID) [contributor] GUGiK (source data) [contributor]","code":""},{"path":"https://kadyb.github.io/rgugik/reference/tile_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download requested tiles — tile_download","title":"Download requested tiles — tile_download","text":"Download requested tiles","code":""},{"path":"https://kadyb.github.io/rgugik/reference/tile_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download requested tiles — tile_download","text":"","code":"tile_download(df_req, outdir = \".\", unzip = TRUE, print_iter = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/tile_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download requested tiles — tile_download","text":"df_req data frame obtained using ortho_request() DEM_request() functions outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed; suitable certain elevation data print_iter print current iteration (logical, TRUE default) ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/tile_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download requested tiles — tile_download","text":"georeferenced tiles properties (resolution, year, etc.) specified input data frame","code":""},{"path":"https://kadyb.github.io/rgugik/reference/tile_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download requested tiles — tile_download","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) options(timeout = 600) polygon_path = system.file(\"datasets/search_area.gpkg\", package = \"rgugik\") polygon = read_sf(polygon_path)  req_df = ortho_request(polygon) tile_download(req_df[1, ]) # download the first image only  req_df = DEM_request(polygon) tile_download(req_df[1, ]) # download the first DEM only } # }"},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Topographic Databases for counties — topodb_download","title":"Download Topographic Databases for counties — topodb_download","text":"Download Topographic Databases counties","code":""},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Topographic Databases for counties — topodb_download","text":"","code":"topodb_download(county = NULL, TERYT = NULL, outdir = \".\", unzip = TRUE, ...)"},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Topographic Databases for counties — topodb_download","text":"county county name Polish. Check county_names() function. TERYT county ID (4 characters) outdir (optional) name output directory; default, files saved working directory unzip TRUE (default) FALSE, TRUE downloaded archive extracted removed ... additional argument utils::download.file()","code":""},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Topographic Databases for counties — topodb_download","text":"database Geography Markup Language format (.GML), content detail level corresponds topographic map scale 1:10000","code":""},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download Topographic Databases for counties — topodb_download","text":"description topographical general geographical databases, technical standards making maps (Polish): https://isap.sejm.gov.pl/isap.nsf/download.xsp/WDU20210001412/O/D20211412.pdf brief description categories layer names (English Polish): https://kadyb.github.io/rgugik/articles/articles/spatialdb_description.html","code":""},{"path":"https://kadyb.github.io/rgugik/reference/topodb_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Topographic Databases for counties — topodb_download","text":"","code":"if (FALSE) { # \\dontrun{ topodb_download(county = \"Świętochłowice\") # 2.4 MB topodb_download(TERYT = c(\"2476\", \"2264\")) # 4.8 MB } # }"},{"path":"https://kadyb.github.io/rgugik/reference/voivodeship_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Voivodeships in Poland — voivodeship_names","title":"Voivodeships in Poland — voivodeship_names","text":"data frame contains Polish English names voivodeships, identifiers (TERC, 2 characters).","code":""},{"path":"https://kadyb.github.io/rgugik/reference/voivodeship_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Voivodeships in Poland — voivodeship_names","text":"","code":"voivodeship_names"},{"path":"https://kadyb.github.io/rgugik/reference/voivodeship_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Voivodeships in Poland — voivodeship_names","text":"object class data.frame 16 rows 3 columns.","code":""},{"path":"https://kadyb.github.io/rgugik/reference/voivodeship_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Voivodeships in Poland — voivodeship_names","text":"","code":"voivodeship_names"},{"path":"https://kadyb.github.io/rgugik/news/index.html","id":"rgugik-041","dir":"Changelog","previous_headings":"","what":"rgugik 0.4.1","title":"rgugik 0.4.1","text":"CRAN release: 2024-05-11 list communes updated (02 January 2024). Update product names DEM_request().","code":""},{"path":"https://kadyb.github.io/rgugik/news/index.html","id":"rgugik-040","dir":"Changelog","previous_headings":"","what":"rgugik 0.4.0","title":"rgugik 0.4.0","text":"CRAN release: 2023-02-27 ortho_request() DEM_request() functions updated new API version. Now can download latest orthophotomaps DEM products. Due lack information SHA database, checkSHA argument tile_download() function deprecated.","code":""}]
